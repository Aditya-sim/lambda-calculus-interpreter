reduce (myparse "(\\x.zx)w")
"zw"

reduce (myparse "(\\x.\\y.zxy)w")
"zw"

reduce (myparse "(\\y.zy(\\x.xy))w")
"zw(\\x.xw)"

reduce (myparse "(\\x.\\y.zxy)(wy)")
"z(wy)"

reduce (myparse "xyz")
"xyz"

reduce (myparse "\\x.zx")
"z"

reduce (myparse "\\y.zxy")
"zx"

reduce (myparse "\\x.zxx")
"\\x.zxx"

reduce (myparse "\\z.(\\f.\\x.fzx)(\\y.y)")
"\\z.z"

// succ c0
reduce (myparse "(\\n.\\f.\\x.nf(fx))(\\f.\\x.x)")
\\f.f

// succ c1
reduce (myparse "(\\n.\\f.\\x.nf(fx))(\\f.\\x.fx)")
"\\b.\\c.b(bc)"

// not true
reduce (myparse "(\\z.z(\\x.\\y.y)(\\x.\\y.x))(\\x.\\y.x)")
"\\b.\\c.c"

// fst (true, false)
reduce (myparse "(\\z.z(\\x.\\y.x))((\\x.\\y.\\z.zxy)(\\x.\\y.x)(\\x.\\y.y))")
"\\x.\\y.x"

// snd (true, false)
reduce (myparse "(\\z.z(\\x.\\y.y))((\\x.\\y.\\z.zxy)(\\x.\\y.x)(\\x.\\y.y))")
"\\x.\\y.y"

// if true then e else r
reduce (myparse "(\\z.\\x.\\y.zxy)(\\x.\\y.x)er")
"e"

// if false then e else r
reduce (myparse "(\\z.\\x.\\y.zxy)(\\x.\\y.y)er")
"r"

// fst (e, r)
reduce (myparse "(\\z.z(\\x.\\y.x))((\\x.\\y.\\z.zxy)er)")
"e"

// snd (e, r)
reduce (myparse "(\\z.z(\\x.\\y.y))((\\x.\\y.\\z.zxy)er)")
"r"

// omega
reduce (myparse "(\\x.xx)(\\x.xx)")
"(\\x.xx)(\\x.xx)"

prettyprint chTrue 
"\\x.\\y.x"

prettyprint (church 2)
"\\f.\\x.f(fx)"

prettyprint (chSucc (church 2))
"\\f.\\x.f(f(fx))"

prettyprint (chIsZero (church 0))
"\\x.\\y.x"

prettyprint (chIsZero (church 2))
"\\x.\\y.y"

prettyprint (chPlus (chSucc (church 2)) (church 3))
"\\f.\\x.f(f(f(f(f(fx)))))"

prettyprint (chMult (church 2) (church 3))
"\\f.\\b.f(f(f(f(f(fb)))))"

prettyprint (chExp (church 2) (church 3))
"\\b.\\c.b(b(b(b(b(b(b(bc)))))))"

prettyprint (chNot chFalse)
"\\x.\\y.x"

prettyprint (chCond chTrue (church 2) (church 10))
"\\b.\\c.b(bc)"

prettyprint (chFst (chPair (church 2) (church 1)))
"\\b.\\c.b(bc)"

prettyprint (chSnd (chPair (church 2) (church 3)))
"\\f.\\x.f(f(fx))"

prettyprint (chAnd chTrue chTrue)
"\\b.\\c.b"

prettyprint (chAnd chFalse chTrue)
"\\x.\\y.y"

prettyprint (chOr chFalse  chTrue)
"\\x.\\y.x"
